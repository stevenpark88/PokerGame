//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using UnityEngine.UI;

public class PlayerBean
{
	GameObject playerGameObject;
	GameObject playerBetGameObject;
	bool isFolded;
	bool isMyTurn;
	string playerName;
	int playerId;
	int totalBalance = 0;
	Image turnImage;
	Image betChips;
	Text txtBetAmount;
	Text txtTotalChips;
	Card handCard1;
	Card handCard2;
	Card waCard;
	Card closeCard;
	bool isSmallBlind = false;
	bool isBigBlind = false;
	bool isDealer = false;
	bool isAllIn;
	bool isWaitingForGamePlayer;
//	private HandleAnimations handleAnim;

	public PlayerBean (GameObject playerGameObject, GameObject playerBetGameObject,
	                   int id, string playerName, int balance, string card1, string card2, string strWaCard)
	{
		this.playerGameObject = playerGameObject;
		this.playerBetGameObject = playerBetGameObject;
//		handleAnim = GameObject.FindGameObjectWithTag ("MainCamera").GetComponent<HandleAnimations> ();
		this.txtTotalChips = playerGameObject.transform.Find (GameConstant.UI_PATH_USER_CLIP).GetComponent<Text> ();
		this.turnImage = playerGameObject.transform.Find (GameConstant.UI_TURN_IMAGE).GetComponent<Image> ();
		this.txtBetAmount = playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_AMOUT).GetComponent<Text> ();
		this.betChips = playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS).GetComponent<Image> ();
		this.playerId = id;
		this.playerName = playerName;
		this.closeCard = new Card (GameConstant.RES_PATH_CARD_CLOSE);
		setCardsAndBalance (balance, card1, card2, strWaCard);
	}

	public void setCardsAndBalance (int balance, string card1, string card2, string strWaCard)
	{

		this.totalBalance = balance;
		this.handCard1 = new Card (card1);
		this.handCard2 = new Card (card2);
		if (strWaCard == null) {
			this.waCard = new Card (GameConstant.RES_PATH_CARD_CLOSE);
		} else {
			this.waCard = new Card (strWaCard);
		}

		this.isFolded = false;
		this.isAllIn = false;
		playerGameObject.SetActive (true);
		setPlayerInfoOnTable ();
		txtBetAmount.text = "";
		initTurnAnimation ();
		stopAnimation ();
		resetPlayer ();
		setBetAmount (0, 0);
	}

	public void deltPlayerCards(){
		if (!isWaitingForGame()) {
			if (appwarp.username.Equals (playerName)) {
				setOpenCardsOnTable ();
			} else {
				setCloseCardsOnTable ();
			}
		}
	}
	public void setPlayerInfoOnTable ()
	{
		playerGameObject.transform.Find (GameConstant.UI_PATH_USER_NAME).GetComponent<Text> ().text = playerName;
		if (appwarp.username.Equals (playerName)) {
//			playerGameObject.transform.Find (GameConstant.UI_PATH_MY_INFO).GetComponent<Text> ().text = "Me";
		}
		txtTotalChips.text = GameConstant.CURRENCY + totalBalance;
	}

	public void setPlayerLastAction (int action, int betAmount)
	{
		Color color = Color.white;
		int realAction = action;
		string actionName = getActionByIndex (action);
		if (action != GameConstant.ACTION_DEALER) {
			totalBalance -= betAmount;
		}
		if (action == GameConstant.ACTION_FOLDED || action == GameConstant.ACTION_FOLD) {
			changeActiveStatusOfPlayerCards (false);
		}
		Text actionText = playerGameObject.transform.Find (GameConstant.UI_PATH_USER_NAME).GetComponent<Text> ();

		if (actionName.Equals ("")) {
			actionName = playerName;
			betAmount = totalBalance;
			color.r = 255;
			color.g = 200;
			color.b = 0;
		} 

		txtTotalChips.text = GameConstant.CURRENCY + betAmount;
		txtTotalChips.color = color;
		actionText.color = color;
		actionText.text = actionName;

		if (isFolded || isAllIn) {
			if (isFolded)
				actionName = "Fold";
			else
				actionName = "All In";
			
			getRankPannel ().SetActive (true);
			getRankText ().text = actionName;
			getRankText ().color = Color.red;
		}
	}

	public void setIsWatingForGamePlayer(){
		isWaitingForGamePlayer = true;
	}
	public bool isWaitingForGame(){
		return isWaitingForGamePlayer;
	}
	public void setCloseCardsOnTable ()
	{
//		DEBUG.Log ("Close Active players "+playerName);
		changeActiveStatusOfPlayerCards (true);
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).GetComponent<Image> ().sprite = closeCard.getCardSprite ();
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).GetComponent<Image> ().sprite = closeCard.getCardSprite ();
	}

	public void setOpenCardsOnTable ()
	{
		changeActiveStatusOfPlayerCards (true);
		if (isFolded) {
			changeActiveStatusOfPlayerCards (false);
		}
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).GetComponent<Image> ().sprite = handCard1.getCardSprite ();
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).GetComponent<Image> ().sprite = handCard2.getCardSprite ();
		if (!appwarp.isTexassGame) {
			if (playerGameObject.transform.Find (GameConstant.UI_PATH_WA_DOWN_SELECTED).gameObject.activeSelf) {
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).GetComponent<Image> ().sprite = waCard.getCardSprite ();
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject.SetActive (false);
			} else if (playerGameObject.transform.Find (GameConstant.UI_PATH_WA_UP_SELECTED).gameObject.activeSelf) {
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).GetComponent<Image> ().sprite = waCard.getCardSprite ();
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject.SetActive (false);
			}
		}
	}

	public GameObject getCardObject ()
	{
		return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).gameObject;
	}

	public GameObject getGameObject ()
	{
		return playerGameObject;
	}

	public void goneFromTable ()
	{
		playerGameObject.SetActive (false);
	}

	public void setMyTurn (bool flag)
	{
		this.isMyTurn = flag;
		if (isMyTurn) {
			//playerGameObject.transform.Find (GameConstant.UI_PATH_USER_BG).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_BG_SELECTED);
			startAnimation ();
		} else {
			//playerGameObject.transform.Find (GameConstant.UI_PATH_USER_BG).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_BG_NORMAL);
			stopAnimation ();
		}
	}

	public string getPlayerName ()
	{
		return playerName;
	}

	public void setSmallBlindPlayer (bool flag)
	{
		string sbUIPath = GameConstant.UI_PATH_SB_BB;
		if (!appwarp.isTexassGame) {
			sbUIPath = GameConstant.UI_PATH_SB_BB_WA;
		}
		this.isSmallBlind = flag;
		if (flag) {
//			playerGameObject.transform.Find (sbUIPath).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_SMALL_BLIND);
			if (appwarp.isTexassGame) {
//				playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (true);
			}
		} else {
			playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (false);
		}
	}

	public void setBigBlindPlayer (bool flag)
	{
		string sbUIPath = GameConstant.UI_PATH_SB_BB;
		if (!appwarp.isTexassGame) {
			sbUIPath = GameConstant.UI_PATH_SB_BB_WA;
		}
		this.isBigBlind = flag;
		if (flag) {
//			playerGameObject.transform.Find (sbUIPath).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_BIG_BLIND);
			if (appwarp.isTexassGame) {
//				playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (true);
			}
		} else {
			playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (false);
		}
	}

	public void setDealerPlayer (bool flag)
	{
		string sbUIPath = GameConstant.UI_PATH_SB_BB;
		if (!appwarp.isTexassGame) {
			sbUIPath = GameConstant.UI_PATH_SB_BB_WA;
		}
		this.isDealer = flag;
		if (flag) {
			playerGameObject.transform.Find (sbUIPath).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_DEALER);
			playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (true);
			if (appwarp.isTexassGame) {
				playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (true);
			}
		} else {
			playerGameObject.transform.Find (sbUIPath).gameObject.SetActive (false);
		}
	}

	public bool isBigBlindPlayer ()
	{
		return isBigBlind;
	}

	public bool isSmallBlindPlayer ()
	{
		return isSmallBlind;
	}

	public bool isDealerPlayer ()
	{
		return isDealer;
	}

	public bool isAllInPlayer ()
	{
		return isAllIn;
	}

	public void setWinnerUser ()
	{
		if (appwarp.isTexassGame)
			playerGameObject.transform.Find (GameConstant.UI_PATH_USER_INFO).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_SELECTED_USER);
		else
			playerGameObject.transform.GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_WINNING_PLAYER);
	}

	public void resetPlayer ()
	{
		if (appwarp.isTexassGame){
			playerGameObject.transform.Find (GameConstant.UI_PATH_USER_INFO).GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_UNSELECTED_USER);
		}else {
			playerGameObject.transform.GetComponent<Image> ().sprite = Resources.Load<Sprite> (GameConstant.RES_PATH_PLAYER_BG);
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject.transform.position =
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP + GameConstant.UI_PATH_POSITION).gameObject.transform.position;
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject.transform.position =
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN + GameConstant.UI_PATH_POSITION).gameObject.transform.position;
			playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS).gameObject.transform.position =
				playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS_POSITION).gameObject.transform.position;
		}

		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).gameObject.transform.position =
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1 + GameConstant.UI_PATH_POSITION).gameObject.transform.position;

		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).gameObject.transform.position =
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2 + GameConstant.UI_PATH_POSITION).gameObject.transform.position;
		
		getRankPannel ().SetActive (false);
	}

	public void changeActiveStatusOfPlayerCards (bool flag)
	{
		if (!appwarp.isTexassGame) {
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).GetComponent<Image> ().sprite = closeCard.getCardSprite ();
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).GetComponent<Image> ().sprite = closeCard.getCardSprite ();
			if (!flag) {
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject.SetActive (flag);
				playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject.SetActive (flag);
			}
		}
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).gameObject.SetActive (flag);
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).gameObject.SetActive (flag);


	}

	public void setBetAmount (int betAmount, int totalBetAmount)
	{
		
		if (betAmount != 0) {
//			betAmount = (betAmount < totalBetAmount ? totalBetAmount : betAmount);
//			DEBUG.Log ("Bet : "+betAmount+" > Total Bet : "+ totalBetAmount);
			getChipObject ().SetActive (true);
			txtBetAmount.text = GameConstant.CURRENCY + totalBetAmount.ToString ();
			txtBetAmount.transform.parent.gameObject.SetActive (true);
		} else {
			txtBetAmount.text = "";
			getChipObject ().SetActive (false);
//			txtBetAmount.transform.parent.gameObject.SetActive (false);
		}
	}

	public void setPlayerBalance (int balance)
	{
		this.totalBalance = balance;
		txtTotalChips.text = GameConstant.CURRENCY + balance;
	}

	public int getBalance ()
	{
		return totalBalance;
	}

	public bool isFoldedPlayer ()
	{
		return isFolded;
	}
	public void setFoldedPlayer(bool flag){
		this.isFolded = flag;
	}
	public string getActionByIndex (int actionIndex)
	{
		switch (actionIndex) {
		case GameConstant.ACTION_CALL:
			return "Call";
		case GameConstant.ACTION_FOLD:
			isFolded = true;
			return "Fold";
		case GameConstant.ACTION_FOLDED:
			return "Fold";
		case GameConstant.ACTION_RAISE:
			return "Raise";
		case GameConstant.ACTION_BET:
			return "Bet";
		case GameConstant.ACTION_ALL_IN:
			isAllIn = true;
			return "All In";
		case GameConstant.ACTION_CHECK:
			return "Check";
		default:
			return "";
		}
	}

	public void setAllInStatus(bool flag){
		isAllIn = flag;
	}
	public void startAnimation ()
	{
		turnImage.gameObject.SetActive (true);
		turnImage.fillAmount = 0.0f;
		//DEBUG.Log ("Start Animation");
	}

	public void stopAnimation ()
	{
		turnImage.fillAmount = 1.0f;
		turnImage.gameObject.SetActive (false);
	}

	public void initTurnAnimation ()
	{


		float waitingTime = (float)GameConstant.TURN_TIME;

		if (turnImage.fillAmount < 1.0f) {
		
			turnImage.fillAmount += 1.0f / waitingTime * Time.deltaTime;
		
			string s1 = turnImage.fillAmount.ToString ();
			string s2 = s1.Substring (0, 4);
			//Debug.Log(s2);
			if (s2 == "0.25") {
				turnImage.color = new Color (1, 0.92f, 0.016f, 0.5f);
			}
			if (s2 == "0.50") {
				turnImage.color = new Color (0, 1, 0, 0.5f);
			}
			if (s2 == "0.75") {
				turnImage.color = new Color (0, 1, 1, 0.5f);
			}
			if (s2 == "0.99") {
				//userActive = false;
				//turnImage.enabled = false;
				turnImage.fillAmount = 1.0f;
				turnImage.gameObject.SetActive (false);

			}
		}

	}

	public GameObject getCardObjectFromCardName (string cardName)
	{
		if (handCard1.getCardName ().Equals (cardName)) {
			return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).gameObject;
		} else if (handCard2.getCardName ().Equals (cardName)) {
			return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).gameObject;
		} else if (!appwarp.isTexassGame && waCard.getCardName ().Equals (cardName)) {
			if (playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject.activeSelf) {
				return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject;
			} else if (playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject.activeSelf) {
				return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject;
			}
		}
		return null;
	}

	public void upWACardOpen ()
	{
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).GetComponent<Image> ().sprite = waCard.getCardSprite ();
	}

	public void upWACardBuy ()
	{
		playerGameObject.transform.Find (GameConstant.UI_PATH_WA_UP_SELECTED).gameObject.SetActive (true);
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject.SetActive (true);
		playerGameObject.transform.Find (GameConstant.UI_PATH_WA_DOWN_SELECTED).gameObject.SetActive (false);
	}

	public void downWACardBuy ()
	{
		playerGameObject.transform.Find (GameConstant.UI_PATH_WA_DOWN_SELECTED).gameObject.SetActive (true);
		playerGameObject.transform.Find (GameConstant.UI_PATH_WA_UP_SELECTED).gameObject.SetActive (false);
		playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject.SetActive (true);
		if (playerName.Equals (appwarp.username)) {
			playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).GetComponent<Image> ().sprite = waCard.getCardSprite ();
		}
	}

	public GameObject getWACardUPObject(){
		return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_UP).gameObject;
	}
	public GameObject getWACardDownObject(){
		return playerGameObject.transform.Find (GameConstant.UI_PATH_CARD_WA_DOWN).gameObject;
	}
	public Image getBetChipsObject ()
	{
		return betChips;
	}

	public GameObject getRankPannel ()
	{
		return playerGameObject.transform.Find (GameConstant.UI_PATH_RANK_PANNEL).gameObject;
	}

	public Text getRankText ()
	{
		return playerGameObject.transform.Find (GameConstant.UI_PATH_RANK).GetComponent<Text> ();
	}

	public GameObject getCard1Object(){
		GameObject gameObject = playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_1).gameObject;
		gameObject.GetComponent<Image> ().sprite = closeCard.getCardSprite ();
		return gameObject;
	}
	public GameObject getCard2Object(){
		GameObject gameObject = playerGameObject.transform.Find (GameConstant.UI_PATH_CARD + GameConstant.UI_PATH_CARD_2).gameObject;
		gameObject.GetComponent<Image> ().sprite = closeCard.getCardSprite ();
		return gameObject;
	}
	public GameObject getCardDeskObject(){
		txtBetAmount.transform.parent.gameObject.SetActive (true);
		playerBetGameObject.transform.Find (GameConstant.UI_PATH_CARD_DESK).gameObject.transform.position =
			playerBetGameObject.transform.Find (GameConstant.UI_PATH_CARD_DESK_POSITION).gameObject.transform.position;
		return  playerBetGameObject.transform.Find (GameConstant.UI_PATH_CARD_DESK).gameObject;
	}
	public GameObject getCardDeskPositionObject(){
		return  playerBetGameObject.transform.Find (GameConstant.UI_PATH_CARD_DESK_POSITION).gameObject;
	}
	public GameObject getChipObject(){
		txtBetAmount.transform.parent.gameObject.SetActive (true);
		playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS).gameObject.transform.position =
			playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS_POSITION).gameObject.transform.position;
		return  playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS).gameObject;
	}
	public GameObject getChipPositionObject(){
		return  playerBetGameObject.transform.Find (GameConstant.UI_PATH_USER_BET_CHIPS_POSITION).gameObject;
	}
}

